openapi: 3.0.0
info:
  title: MyShop API
  version: 1.0.0
  description: API documentation for MyShop

servers:
  - url: http://localhost:5001

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegister:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "user123"
      required:
        - name
        - email
        - password

    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "user123"
      required:
        - email
        - password

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken

    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        price:
          type: number
        image:
          type: string
        description:
          type: string
      required:
        - name
        - price

    LoginResponse:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
        accessToken:
          type: string
        refreshToken:
          type: string

    AccessTokenResponse:
      type: object
      properties:
        accessToken:
          type: string

security:
  - bearerAuth: []

paths:

  /api/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Bad request or user already exists
        '500':
          description: Server error

  /api/auth/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid email or password
        '500':
          description: Server error

  /api/auth/refresh:
    post:
      summary: Get a new access token using a refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: New access token generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
        '401':
          description: Invalid or expired refresh token

  /api/products:
    post:
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                countInStock:
                  type: integer
                  example: 10
                image:
                  type: string
                  format: binary
                description:
                  type: string
      responses:
        '201':
          description: Product created
        '401':
          description: Unauthorized
        '403':
          description: Admin access only
        '500':
          description: Server error

  /api/products/{id}:
    put:
      summary: Update a product
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                countInStock:
                  type: integer
                  example: 10
                image:
                  type: string
                  format: binary
                description:
                  type: string
      responses:
        '200':
          description: Product updated
        '401':
          description: Unauthorized
        '403':
          description: Admin access only
        '404':
          description: Product not found
        '500':
          description: Server error

    delete:
      summary: Delete a product
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID
      responses:
        '204':
          description: Product deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Admin access only
        '404':
          description: Product not found
        '500':
          description: Server error
